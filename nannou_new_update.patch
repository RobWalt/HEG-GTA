diff --git a/nannou_new/Cargo.toml b/nannou_new/Cargo.toml
index e5bb731..56a4cd3 100644
--- a/nannou_new/Cargo.toml
+++ b/nannou_new/Cargo.toml
@@ -11,6 +11,7 @@ homepage = "https://github.com/nannou-org/nannou/tree/master/nannou_new"
 edition = "2018"
 
 [dependencies]
-cargo = "0.42" # For retrieving the latest `nannou` version and working with cargo-clone.
-names = "0.11" # For generating random project names.
+cargo = "0.74" # For retrieving the latest `nannou` version and working with cargo-clone.
+names = "0.14" # For generating random project names.
 rand = "0.8" # For generating random beverages (very important).
+reqwest = { version = "0.11", features = [ "blocking" ] }
diff --git a/nannou_new/src/main.rs b/nannou_new/src/main.rs
index ac1f06b..95ff317 100644
--- a/nannou_new/src/main.rs
+++ b/nannou_new/src/main.rs
@@ -6,6 +6,7 @@
 //! 4. Adds the latest nannou version as a dep to the `Cargo.toml`.
 //! 5. Builds the project with optimisations. Suggests getting a beverage.
 
+use cargo::core::{Dependency, QueryKind};
 use cargo::CargoResult;
 use std::env;
 use std::fs::{self, File};
@@ -13,7 +14,9 @@ use std::io::{self, BufRead, Write};
 use std::path::Path;
 use std::process::{Command, Stdio};
 use std::sync::mpsc;
+use std::task::Poll;
 use std::thread;
+use std::time::Duration;
 
 enum Project {
     Sketch,
@@ -80,17 +83,25 @@ fn crates_io_package_latest_version(name: &str) -> CargoResult<cargo::core::Pack
     // The crates.io registry source.
     let yanked = std::collections::HashSet::new();
     let mut registry_source =
-        cargo::sources::registry::RegistrySource::remote(src_id, &yanked, &cargo_config);
+        cargo::sources::registry::RegistrySource::remote(src_id, &yanked, &cargo_config)?;
 
     // The nannou dependency (don't really understand why we need "Dependency").
     let vers = None;
-    let dep = cargo::core::dependency::Dependency::parse_no_deprecated(name, vers, src_id)?;
+    let dep = Dependency::parse(name, vers, src_id)?;
 
     // Hold the package lock until the end of the function, query and download requires it.
     let _lock = cargo_config.acquire_package_cache_lock()?;
 
     // Retrieve the PackageId by querying the source and finding the most recent one.
-    let versions = registry_source.query_vec(&dep)?;
+    let versions = registry_source.query_vec(&dep, QueryKind::Fuzzy)?;
+    while versions.is_pending() {
+        std::thread::sleep(Duration::from_secs(1));
+        println!("Waiting for 1 second")
+    }
+    let versions = match versions {
+        Poll::Ready(versions) => versions,
+        Poll::Pending => unreachable!("Poll still pending"),
+    };
     let most_recent_pkg_id = match versions.iter().map(|v| v.package_id()).max() {
         Some(pkg_id) => pkg_id,
         None => panic!("could not find `{}` package in crates.io registry", name),
@@ -136,21 +147,19 @@ fn main() {
     let nannou_package = crates_io_package_latest_version("nannou")
         .expect("failed to retrieve `nannou` package from crates.io");
 
+    let template_url = format!(
+        "https://raw.githubusercontent.com/nannou-org/nannou/master/examples/templates/{}",
+        project.template_file_name()
+    );
+    let response = reqwest::blocking::get(template_url)
+        .expect("couldn't get respone from requesting template file");
+
     // Get the latest nannou version.
     let nannou_version = format!("{}", nannou_package.version());
     let nannou_dependency = format!("nannou = \"{}\"", nannou_version);
 
     // Find the template file within the nannou package.
-    let template_bytes = {
-        let template_path = nannou_package
-            .root()
-            .join("examples")
-            .join(&project.template_file_name());
-        std::fs::read(&template_path).expect(&format!(
-            "failed to read template bytes from {}",
-            template_path.display()
-        ))
-    };
+    let template_bytes = response.bytes().expect("couldn't get bytes from response");
 
     // Get the current directory.
     let current_directory = env::current_dir().expect("could not retrieve current directory");
